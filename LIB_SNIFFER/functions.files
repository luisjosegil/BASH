#!/bin/bash
#
# 	Pareams to be rewritten by main code
#
#       v1.3     11-2018
#       Just version control added
#

FIELD_SEPARATOR_CFG_FILE="="
LABEL_PREV_DT="__label__"	

AUTH_LOG_FILE1="_auth1_"
AUTH_LOG_FILE2="_auth2_"
	
CUSTOM_LOG_FILE=".tmpLOG"
TMP_FILE=".tmpSniff"	

TXT_INVALID="Invalid user"

# this common lib is necessary
# loaded in main code
#source common.lib

# --- Functions

function update_cfg() {
	# Reviewd 2019-11-18
	param="${1}"
	value="${2}"
	# La línea comienza por el parámetro, y sigue con un =
	delFromFile "^${param}${FIELD_SEPARATOR_CFG_FILE}" ${file_cfg}
	if [[ ${TEST_MODE} == ${TRUE} ]]
	then
		echo -e "${RED}TEST MODE.${NC} update_cfg()"	
		echo -e "${param}${FIELD_SEPARATOR_CFG_FILE}${value} should be added to ${file_cfg}" 
	else
		echo -e "${param}${FIELD_SEPARATOR_CFG_FILE}${value}" >> ${file_cfg}
	fi
}

function read_from_cfg() {
	# Reviewd 2019-11-18
	param="${1}"
	# La línea comienza por el parámetro, y sigue con un =
	for _lines in $(/bin/grep "^${param}${FIELD_SEPARATOR_CFG_FILE}" ${file_cfg} \
			| /bin/grep -v grep )
	do
		local _param_i=$(echo "${_lines}" \
				| /usr/bin/awk -F"${FIELD_SEPARATOR_CFG_FILE}" '{print $1}')	
		local _value_i=$(echo "${_lines}" \
				| /usr/bin/awk -F"${FIELD_SEPARATOR_CFG_FILE}" '{print $2}')

		if [[ ${_param_i} == ${param} ]]
		then
			echo "${_value_i}"
		fi	
	done 
}

function count_attempts_per_ip_in_file() {
	# Reviewd 2019-11-18
	local ip="${1}"
	local filename="${2}"

	/usr/bin/sudo /bin/grep "${TXT_INVALID}.*${ip}" "${filename}" \
	| /usr/bin/wc -l
	# | /bin/grep "Invalid.*${ip}" \
	#/usr/bin/sudo /bin/cat "${filename}" \
	#| /bin/grep "${TXT_INVALID}.*${ip}" \
	#| /usr/bin/wc -l
}

function find_line_at_log() {
	# Reviewd 2019-11-18
	# To find which line to start at log file

	local last_epoch=$(read_from_cfg "${LABEL_PREV_DT}")	
	local last_dt=$(epoch2auth_file_dt "${last_epoch}" ) 

	# We could count first "${last_dt}" labels
	# if > 1 -> rm all and return 0

	local num=$(	/usr/bin/sudo /bin/cat -n "${AUTH_LOG_FILE1}" "${AUTH_LOG_FILE2}" \
			| /bin/grep "${last_dt}" \
			| /usr/bin/tail -n 1 \
			| /usr/bin/awk -F" " '{print $1}')

	if [[ "${num}" ]]
	then
		# Continue on next line
		let num=num+1
		echo "${num}"
	else
		# Start from the beginning	
		echo "0"
	fi 
}

function count_num_lines() {
	# Reviewd 2019-11-18
	/usr/bin/sudo /bin/cat -n "${AUTH_LOG_FILE1}" "${AUTH_LOG_FILE2}"\
	| /usr/bin/wc -l
}

function create_custom_log() {
	# Reviewd 2019-11-18
	# removes all processed lines in LOG file 
	local filename="${1}"
	local line_num=$(find_line_at_log)

	# Aqu'i haria falta anadir un grep "Failed password" 

	if (( ${line_num} > 0 ))
	then
		local total_lines=$( count_num_lines )
		let num_lines_to_show=total_lines-line_num
		/usr/bin/sudo /bin/cat "${AUTH_LOG_FILE1}" "${AUTH_LOG_FILE2}"\
			| /usr/bin/tail -n "${num_lines_to_show}" > ${filename}
	else
		/usr/bin/sudo /bin/cat "${AUTH_LOG_FILE1}" "${AUTH_LOG_FILE2}" > ${filename}
	fi 
}

function compare_strings() {
	# Reviewd 2019-11-18
	if [[ ${1} = ${2} ]]
	then
		echo "${TRUE}"
	else
		echo "${FALSE}"
	fi
}

function strict_exists_in_f() {
	# Reviewd 2019-11-18
	# Compare whole text with file row
	local text="${1}"
	local file="${2}"

	for text_i in $(/bin/grep "${text}" ${file})
	do
		if [[ ${text_i} == ${text} ]]
		then
			echo "${TRUE}"
			return
		fi
	done
	echo "${FALSE}"
}

function exists_in_file() {
	# Reviewd 2019-11-18
	local text="${1}"
	local file="${2}"

	local EXISTS=$(/bin/grep "${text}" ${file})
	if [[ ${EXISTS} ]]
	then
		echo "${TRUE}"
	else
		echo "${FALSE}"
	fi
}

function add2file() {
	# Reviewd 2019-11-18
	local text="${1}"
	local filename="${2}"
	
	local already_in_file=$( strict_exists_in_f "${text}" "${filename}" )
	if [[ ${already_in_file} == ${FALSE} ]]
	then
		if [[ ${TEST_MODE} == ${TRUE} ]]
		then
			echo -e "${RED}TEST MODE.${NC} add2file()"	
			echo -e "${text} to ${filename}"
		else
			echo "${text}" >> ${filename}
		fi
	fi
}

function add2fileWhithDate() {
	# Reviewd 2019-11-18
	local text="${1}"
	local filename="${2}"
	local already_in_file=$( exists_in_file "${text}" "${filename}" )
	if [[ ${already_in_file} == ${FALSE} ]]
	then
		local dt_epoch=$(curDate2epoch)	
		local dt_txt=$(epoch2date "${dt_epoch}")	
		if [[ ${TEST_MODE} == ${TRUE} ]]
		then
			echo -e "${RED}TEST MODE.${NC}"	
			echo "add2fileWhithDate ${text}${FIELD_SEPARATOR}${dt_epoch}${FIELD_SEPARATOR}${dt_txt} -> ${filename}"
		else
			echo "${text}${FIELD_SEPARATOR}${dt_epoch}${FIELD_SEPARATOR}${dt_txt}" >> ${filename}
		fi
	fi
}

function delFromFile() {
	# Reviewd 2019-11-18
	# Removes lines  tt contain this text 
	local text="${1}"
	local filename="${2}"

	if [[ ${TEST_MODE} == ${TRUE} ]]
	then
		echo -e "${RED}TEST MODE.${NC}"	
		echo -e "delFromFile ${text} from ${filename}"
		/bin/grep -v "${text}" ${filename}
	else
		/bin/grep -v "${text}" ${filename} > ${TMP_FILE}
		/bin/mv ${TMP_FILE} ${filename}	
	fi
} 

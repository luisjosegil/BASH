#
# 	TEST control added
#
#       Version 1.3     17-11-2019
#

FIELD_SEPARATOR_CFG_FILE="="
LABEL_PREV_DT="__label__"	

AUTH_LOG_FILE1="_auth1_"
AUTH_LOG_FILE2="_auth2_"
	
CUSTOM_LOG_FILE=".tmpLOG"
TMP_FILE=".tmpSniff"	


# this common lib is necessary
# loaded in main code
#source common.lib

# --- Functions

update_cfg() {
	param=$(echo $1)
	value=$(echo $2)
	delFromFile "${param}${FIELD_SEPARATOR_CFG_FILE}" $file_cfg
	echo "${param}${FIELD_SEPARATOR_CFG_FILE}${value}" >> $file_cfg 
}

read_from_cfg() {
	param=$(echo $1)

	for _lines in $(/bin/grep "${param}${FIELD_SEPARATOR_CFG_FILE}" $file_cfg \
			| /bin/grep -v grep );
	do
		local _param_i=$(echo "${_lines}" \
				| /usr/bin/awk -F"${FIELD_SEPARATOR_CFG_FILE}" '{print $1}')	
		local _value_i=$(echo "${_lines}" \
				| /usr/bin/awk -F"${FIELD_SEPARATOR_CFG_FILE}" '{print $2}')
		is_eq=$(compare_strings "${_param_i}" "${param}" )
		if [[ "${is_eq}"="${TRUE}" ]];
		then
			echo "${_value_i}"
			return
		fi	
	done 
}

count_attempts_per_ip_in_file() {
	local ip=$(echo "$1")
	local filename=$(echo "$2")

	/usr/bin/sudo /bin/cat "${filename}"\
	| /bin/grep "Invalid.*${ip}"\
	| /usr/bin/wc -l
}

find_line_at_log() {
	# To find which line to start at log file
	local last_epoch=$(read_from_cfg "${LABEL_PREV_DT}")	
	local last_dt=$(epoch2auth_file_dt "${last_epoch}" ) 
	local num=$(	/usr/bin/sudo /bin/cat -n "${AUTH_LOG_FILE1}" "${AUTH_LOG_FILE2}"\
			| /bin/grep "${last_dt}"\
			| /usr/bin/tail -n 1 \
			| /usr/bin/awk -F" " '{print $1}')
	if [[ "${num}" ]];
	then
		# Continue on next line
		let num=num+1
		echo "${num}"
	else
		# Start from the beginning	
		echo "1"
	fi 
}

count_num_lines() {
	/usr/bin/sudo /bin/cat -n "${AUTH_LOG_FILE1}" "${AUTH_LOG_FILE2}"\
	| /usr/bin/wc -l
}

create_custom_log() {
	# removes all processed lines in LOG file 
	local filename="${1}"
	local line_num=$(find_line_at_log)
	if [ "${line_num}" != "1" ]
	then
		local total_lines=$( count_num_lines )
		let num_lines_to_show=total_lines-line_num
		/usr/bin/sudo /bin/cat "${AUTH_LOG_FILE1}" "${AUTH_LOG_FILE2}"\
			| /usr/bin/tail -n "${num_lines_to_show}" > $filename
	else
		/usr/bin/sudo /bin/cat "${AUTH_LOG_FILE1}" "${AUTH_LOG_FILE2}"
	
	fi 
}

compare_strings() {
	if [[ "$1" = "$2" ]];
	then
		echo "$TRUE"
	else
		echo "$FALSE"
	fi
}

strict_exists_in_f() {
	# Compare whole text with file row
	local text="${1}"
	local file="${2}"
	local EXISTS="$FALSE"
	for text_i in $(/bin/grep "${file}" $2)
	do
		if [[ "$text_i" = "$text" ]];
		then
			echo "${TRUE}"
			return
		fi
	done
	echo "${FALSE}"
}

exists_in_file() {
	local text="${1}"
	local file="${2}"
	# $1 text
	# $2 filename	
	local EXISTS=$(/bin/grep "${file}" $2)
	if [[ $EXISTS ]];
	then
		echo "$TRUE"
	else
		echo "$FALSE"
	fi
}

add2file() {
	local text="${1}"
	local filename="${2}"
	
	local already_in_file=$(strict_exists_in_f "$text" "$filename")
	if [[ "$already_in_file" = "$FALSE" ]]
	then
		echo "$text" >> $filename
	fi
}

add2fileWhithDate() {
	local text="${1}"
	local filename="${2}"
	local already_in_file=$(exists_in_file "$text" "$filename")
	if [[ "${already_in_file}" = "${FALSE}" ]]
	then
		local dt_epoch=$(curDate2epoch)	
		local dt_txt=$(epoch2date "$dt_epoch")	
		if [[ "${TEST_MODE}" == "${TRUE}" ]]
		then
			echo -e "${RED}TEST MODE.${NC}"	
			echo "add2fileWhithDate ${text}${FIELD_SEPARATOR}${dt_epoch}${FIELD_SEPARATOR}${dt_txt} -> ${filename}"
		else
			echo "${text}${FIELD_SEPARATOR}${dt_epoch}${FIELD_SEPARATOR}${dt_txt}" >> ${filename}
		fi
	fi
}

delFromFile() {
	# Removes lines that begin with TEXTxxx
	local text="${1}"
	local filename="${2}"

	if [[ "${TEST_MODE}" == "${TRUE}" ]]
	then
		echo -e "${RED}TEST MODE.${NC}"	
		echo -e "delFromFile ${text} from ${filename}"
		/bin/grep -v "^${text}" ${filename}
	else
		/bin/grep -v "^${text}" ${filename} > ${TMP_FILE}
		/bin/mv ${TMP_FILE} ${filename}	
	fi
	return
} 

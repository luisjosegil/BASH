#!/bin/bash
# 	UFW manipulation specific functions
#
#       v1.3     11-2018
#       Just version control added
#

# this common lib is necessary
# loaded in main code
#source common.lib

# -- Variables to be rewritten by main
SSH_CONFIG_FILE="/etc/ssh/sshd_config"
# SSH_PORT= se recupera al final de la librería

FIELD_SEPARATOR="=" 
TMP_FILE="/tmp/.Sniffer.tmp"
TMP_UFW_FILE="/tmp/.Sniffer.tmpUFW"
CUSTOM_LOG_FILE="/tmp/.Sniffer.customLOG"

MINS_EXPIRATION_RULE="1440"
# --- Functions

TXT_INVALID="Invalid user"
TXT_INVALID_USERNAME="Invalid user"
TXT_SSHD="sshd"
TXT_SSH="ssh"
TXT_UFW_DENY="DENY"

# --- MESSAGES ------------------------------

function msg_ip_not_ufw() {
	echo -e "${RED}IP ${1} not in UFW rules!${NC}"
}

function msg_ip_removed_fw() {
	echo -e "${RED}${1}${NC} removed from FW"
}
function msg_err_ip_not_rmoved_fw() {
	echo -e "${RED}ERROR. ${1}${NC} not removed from FW"
}
# --- END MESSAGES --------------------------
 
function retrieve_SSH_port() {
	# Retrieve SSG port from SYSTEM
	local ssh_config_file="${1}"
	/bin/grep "^Port " ${ssh_config_file} \
		| /usr/bin/cut -d ' ' -f 2
}

function ban_ip_for_SSH() {
	local ip="${1}"
	if [[ "${TEST_MODE}" == "${TRUE}" ]]
	then
		echo -e "${RED}TEST MODE.${NC} ban_ip_for_SSH()"
		echo -e "IP ${RED}${ip}${NC} should be quarantined"
	else	
		if /usr/bin/sudo ufw insert 1 deny from "${ip}" to any port $SSH_PORT;
		then
			echo -e "IP ${RED}${ip}${NC} quarantined"
		else
			echo -e "${RED}ERROR. ${ip}${NC} not quarantined"
		fi
	fi
	return
}

function dumpUFWrules2File() {
	local file="${1}"
	if [ ! -f ${file} ]
	then
		/usr/bin/sudo ufw status \
		| /bin/grep -v grep > ${file}
	fi
}

function check_if_ip_already_banned() {
	# If IP in banned file -> True
	# TMP_UFW_FILE deleted when this LIB is loaded

	local ip="${1}"
	local IP_EXISTS=$(/bin/grep "${ip}" "${file_banned_ips}" )
	if [[ ${IP_EXISTS} ]]
	then
		# IP already in UFW
		echo "${TRUE}"
		return
	else
		dumpUFWrules2File ${TMP_UFW_FILE}
		if /bin/grep "${SSH_PORT}.*${TXT_UFW_DENY}.*${ip}" ${TMP_UFW_FILE} 
		then
			echo "${TRUE}"
			return
		fi
	fi	
	echo "${FALSE}"
}

function _remove_banned_ip_buffered() {
	# This command must be used in collaboration with _ufw2file
	local ip="${1}"
	local file="${2}"

	local rule_id=$( /bin/grep "${SSH_PORT}.*${TXT_UFW_DENY}.*${ip}" ${file} )

	if [[ ${rule_id} ]]
	then
		remove_banned_ip "${ip}"	
	else
		msg_ip_not_ufw "${ip}" 
	fi
}

remove_ufw_rule_by_id() {
	local let rule_id="${1}"	
	if [[ "${TEST_MODE}" == "${TRUE}" ]]
	then
		echo -e "${RED}TEST MODE.${NC}"
		echo -e "FW rule ${RED}${rule_id}${NC} should be removed"
	else	
		if /usr/bin/sudo ufw --force delete "${rule_id}";
		then
			msg_ip_removed_fw "${ip}"
		else
			msg_err_ip_not_rmoved_fw "${ip}"
		fi
	fi
	return
}

function remove_banned_ip() {
	local ip="${1}"
	local rule_id=$(	/usr/bin/sudo ufw status numbered \
				| /bin/grep "${SSH_PORT}.*${TXT_UFW_DENY}.*${ip}" \
				| /usr/bin/cut -d"[" -f2 \
				| /usr/bin/cut -d"]" -f1 )

	if [[ ${rule_id} ]]
	then
		remove_ufw_rule_by_id "${rule_id}"
	else
		msg_ip_not_ufw "${ip}" 
	fi
}

function maintain_ip_ddbb() {
	# Retrieve banned IPs ahd check
	# whether is expired

	/bin/rm -f ${TMP_UFW_FILE} 
	dumpUFWrules2File ${TMP_UFW_FILE}

	local file_banned_ips="${1}"
	local file_banned_ips_expired="${2}"
	local MINS_EXPIRATION_RULE="${3}"

	local dt_now=$(curDate2epoch)
	local let lifetime_sec=${MINS_EXPIRATION_RULE}*60
	local let dt_limit=dt_now-lifetime_sec

	for _line in $(	/usr/bin/cut -d${FIELD_SEPARATOR} -f1,2 ${file_banned_ips} \
			| /usr/bin/sort -u )
	do
		local ip=$(	echo "${_line}"\
			| /usr/bin/awk -F${FIELD_SEPARATOR} '{print $1}')
		local dt_ip=$(	echo "$_line"\
			| /usr/bin/awk -F${FIELD_SEPARATOR} '{print $2}')
		let dt_res_ip=dt_ip-dt_limit
		if [ "${dt_res_ip}" -lt "0" ]
		then
			_remove_banned_ip_buffered "${ip}" "${TMP_UFW_FILE}"
			/bin/grep "${_line}" ${file_banned_ips} >> ${file_banned_ips_expired}
			delFromFile "${ip}" "${file_banned_ips}"
		fi
	done
}

function _suspicious_ips_using_usr_pwd() {
	create_custom_log "${CUSTOM_LOG_FILE}"

	/bin/grep "${TXT_INVALID_USERNAME}" ${CUSTOM_LOG_FILE} \
	| /bin/grep -Eo "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" \
	| /bin/grep -v grep\
	| /usr/bin/sort -u
}

find_suspicious_ips() {
	create_custom_log "${CUSTOM_LOG_FILE}"
	# /bin/grep "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" \
	/bin/grep "${TXT_INVALID}" ${CUSTOM_LOG_FILE} \
	| /bin/grep -v grep\
	| /usr/bin/awk '{print $10}'\
	| /usr/bin/sort -u
}

count_login_attepts_for_ip() {
	local ip="${1}"

	if [ ! -f "${CUSTOM_LOG_FILE}" ]; then
		echo -e "${RED}count_login_attepts_for_ip.Working file doesn´t exist!${NC}"
		return
	fi
	/bin/grep "${TXT_INVALID_USERNAME}" ${CUSTOM_LOG_FILE} \
	| /bin/grep ${TXT_SSHD} \
	| /bin/grep ${ip} \
	| /bin/grep -v grep \
	| /usr/bin/wc -l 
}

find_suspicious_users() {
	# Searching for suspicious logging attempts
	if [ ! -f "${CUSTOM_LOG_FILE}" ]; then
		echo -e "${RED}find_suspicious_users.Working file doesn´t exist!${NC}"
		return
	fi
	#grep "sshd.*Invalid.*202.28.64.1"
	# /bin/grep "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" \
	/bin/grep "${TXT_SSHD}.*${TXT_INVALID_USERNAME}.*" ${CUSTOM_LOG_FILE} \
	| /bin/grep -v " root " \
	| /bin/grep -v " ljcd " \
	| /bin/grep -v grep\
	| /usr/bin/awk -F' ' '{print $8}' \
	| /usr/bin/sort -u
}

function find_users4ip() {
	local ip="${1}"

	if [ ! -f "$CUSTOM_LOG_FILE" ]; then
		echo -e "${RED}find_users4ip.Working file doesn´t exist!${NC}"
		return
	fi

	/bin/grep "${TXT_SSHD}.*${TXT_INVALID_USERNAME}.*${ip}" ${CUSTOM_LOG_FILE} \
	| /bin/grep -v "leti" \
	| /bin/grep -v "ljcd" \
	| /bin/grep -v grep \
	| /usr/bin/awk -F' ' '{print $8}' \
	| /usr/bin/sort -u
}

find_ips_for_user() {
	# Which IPs are trying to access with this user?
	if [ ! -f "$CUSTOM_LOG_FILE" ]; then
		echo -e "${RED}find_ips_for_user.Working file doesn´t exist!${NC}"
		return
	fi
	/bin/cat $CUSTOM_LOG_FILE \
	| /bin/grep Invalid \
	| /bin/grep " $1 " \
	| /usr/bin/awk -F' ' '{print $10}' \
	| /usr/bin/sort -u
}

# --- CODIGO ---
SSH_PORT=$( retrieve_SSH_port ${SSH_CONFIG_FILE} )
# to avoid reusing previous UFW rules file
/bin/rm -f ${TMP_UFW_FILE} 
